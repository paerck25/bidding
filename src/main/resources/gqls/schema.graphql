
type Query {
    getAllUsers: [User]
    getUser(email: String!) : User
    getMyProfile(user: ID) : Profile
    getAllRequests: [Request]
    getMyRequests(author: ID!) : [Request]
    getMyBids(author: ID!) : [Bid]
    getBidsInRequest(request: ID) : [Bid]
    getMyRoom(request: ID,seller: ID) : Room
    getMyRoomListForSeller(seller: ID) : [Room]
}

type Mutation {
    login(email: String!, pwd: String!) : LoginData!
    signUp(input: UserInput!) : Boolean!
    editMyProfile(input: ProfileInput) : Boolean!
    sendRequest(input: RequestInput) : Boolean!
    sendBid(input: BidInput) : String!
    sendNewMessage(input: MessageInput) : Message
    choiceOneBid(bid: ID, request: ID) : Boolean
    tradeComplete(bid: ID, request: ID) : Boolean
    tradeCancle(request: ID) : Boolean
    bidCancle(request: ID, author:ID):Boolean
    requestTimeOver(request:ID):Boolean
}

type Subscription {
    newMessage(room : ID) : Message
}

type LoginData {
    _id: ID
    name: String
    email: String
    is_seller: Boolean
    result: String!
}

type User {
    _id: ID!
    name: String!
    email: String!
    pwd: String!
    is_seller: Boolean!
    profile: Profile
}

input UserInput {
    name: String!
    email: String!
    pwd: String!
    is_seller: Boolean!
}

type Profile {
    _id: ID
    user: User
    phone: String
    profileImage: String
    exampleImages: [String]
    text: String
    reviews: [Review]
}

input ProfileInput {
    user: ID!
    phone: String
    profileImage: String
    exampleImages: [String]
    text: String
}

type Review {
    _id: ID
    name: String
    text: String
    rating: Float
}

input ReviewInput {
    name: String
    text: String
    rating: Float
}

type Request {
    _id: ID
    author: User
    detail: String
    category: String
    requestedAt: String
    deadLine: Float
    hopeDate: String
    state: String
    tags: [String]
}

input RequestInput {
    author: ID
    detail: String
    category: String
    deadLine: Float
    hopeDate: String
    tags: [String]
}

type Bid {
    _id: ID
    request: Request
    author: User
    price: String
    state: String
}

input BidInput {
    request: ID
    author: ID
    name: String
    price: String
}

type Room {
    _id: ID
    request: Request
    seller: User
    messages: [Message]
}

type Message {
    room: Room
    name: String
    message: String
    createdAt: String
}

input MessageInput {
    room: ID
    name: String
    message: String
}

query GetAllUsers{
  getAllUsers{
    _id
    name
    email
  }
}


query GetOneUser($email:String!) {
  getUser(email:$email){
    _id
    name
    email
  }
}

query GetAllRequests{
  getAllRequests{
    _id
    author {
      _id
      name
    }
    detail
    category
    requestedAt
    deadLine
    hopeDate
    state
    tags
  }
}

query GetMyBids($author:ID!){
  getMyBids(author:$author){
    request{
      _id
      author{
        _id
        name
        email
      }
      detail
      category
      deadLine
      hopeDate
      tags
      requestedAt
      state
    }
    state
  }
}

getMyRoomListForSeller(seller:$seller){
    _id
    request{
      author{
        _id
        name
      }
      category
    }
    seller{
      _id
      name
    }
    messages{
      name
      message
      createdAt
    }
  }
}

  getMyRequests(author:$author){
    _id
    author{
      name
    }
    detail
    category
    requestedAt
    deadLine
    hopeDate
    state
    tags
  }
}

query GetMyRoom($request:ID,$seller:ID){
  getMyRoom(request:$request,seller:$seller){
    _id
    messages{
      name
      message
      createdAt
    }
  }
}

query GetMyProfile($user:ID){
  getMyProfile(user:$user){
    user{
      name
      email
    }
    phone
    profileImage
    exampleImages
    text
    reviews{
      name
      text
      rating
    }
  }
}

mutation SendRequest($input:RequestInput){
  sendRequest(input:$input)
}

mutation SendBid($input:BidInput){
  sendBid(
    input:$input
  )
}

mutation SignUp($input:UserInput!){
  signUp(input:$input)
}

mutation SendNewMessage($input:MessageInput){
  sendNewMessage(input:$input){
    name
    message
    createdAt
  }
}

mutation ChoiceOneBid($bid:ID,$request:ID){
  choiceOneBid(bid:$bid,request:$request)
}

mutation TradeComplete($bid:ID,$request:ID){
  tradeComplete(bid:$bid,request:$request)
}

mutation TradeCancle($request:ID){
  tradeCancle(request:$request)
}

mutation BidCancle($request:ID,$author:ID){
  bidCancle(request:$request,author:$author)
}

mutation RequestTimeOver($request:ID){
  requestTimeOver(request:$request)
}

mutation EditMyProfile($input:ProfileInput){
  editMyProfile(input:$input)
}

subscription NewMessage($room:ID){
  newMessage(room:$room){
    name
    message
    createdAt
  }
}